#!/bin/sh

usage() {
  cat <<USAGE
usage: git fork new <source> [<destination>] [-o <origin>] [-q]

Arguments:
  <source>        Cloneable URI of the repo you wish to fork.
  <destination>   Directory to clone the fork to.
                  Defaults to the current directory.

Options:
  -o <origin>     URI of a remote to host your fork at.
  -q              Suppresses output.

USAGE
}

help() {
  usage; cat <<HELP
Makes a new fork of a <source> repository.

The <source> remote is named as such under the assumption you will be pushing
contributions to a different remote that you have ownership of.

Like git-clone, you can provide an optional <destination> to fork to.
Otherwise, the fork is built in your current directory, in a directory
named after the repository.

An <origin> you have ownership of may be supplied with the -o flag.

Integration with GitHub forks is under dev.

HELP
}

cmd_help() {
  help; exit 0
}

cmd_new(){
  # Required first parameter
  local source=$1; shift
  local destination=''
  local origin=''

  # If next parameter exists and is not an option
  if [ -n "$1" ] && [[ $1 != -* ]]; then
    # use it as a destination
    destination=$1; shift
  else
    # determine the implicit destination
    # from the working directory and the source repo name"
    destination="$CALL_DIR/$(get_git_dir_name $source)"
  fi

  parse_opts "$@"

  execute "git clone $source $destination"
  cd $destination
  output "Setting $source as <source> remote."
  git remote rename origin source

  if [[ "$origin" ]]; then
    output "Setting $origin as <origin> remote."
    git remote add origin $origin
  fi

  exit 0
}

parse_opts() {
  while getopts ":o:q" option
  do
    case "$option" in
      o)
        origin="$OPTARG"
        ;;
      q)
        QUIET=true
        ;;
      *)
        usage; exit 1
        ;;
    esac
  done
}
