#!/bin/sh

usage() {
  cat <<USAGE
usage: git fork submit [-A|--all | -L|--local | <branch_names>...] [-r <remote>] [-q|--quiet]

Arguments:
  <branch_names>  List of branches to rebase off of master.
                  Defaults to the current branch if not on master.

Options:
  -A | -all       Submits all branches.
  -L | -local     Submits all branches that only exist locally.
  -r <remote>     Remote to push to.
                  Defaults to origin.
  -q | --quiet    Suppresses output.

USAGE
}

help() {
  usage; cat <<HELP
Ensures <branch_names> are updated, then pushes them to a <remote>.

If <branch_names> are supplied, each branch is rebased off of the fresh master.
You can also instead submit all branches that only exist locally,
or every branch.

HELP
}

cmd_help() {
  help; exit 0
}

cmd_update(){

  INITIAL_BRANCH=$(current_branch)

  # Until parameter doesn't exist or is an option
  until [ -z "$1" ] || [[ $1 = -* ]]; do
    # add it as a branch name
    BRANCHES="$BRANCHES $1"; shift
  done

  # If no branches supplied and current is not master, rebase current.
  if [[ -z "$BRANCHES" ]] && [[ $INITIAL_BRANCH != 'master' ]]; then
    BRANCHES="$INITIAL_BRANCH"
  fi

  parse_opts "$@"

  # If no remote specified, use origin
  if [[ -z "$REMOTE" ]]; then
    REMOTE='origin'
  fi

  # Assert the existance of REMOTE, or fail
  if [[ -n "$(branch_exists $REMOTE)" ]]; then

    # If ALL is set
    if [ -n "$ALL" ]; then
      # submit all branches
      for branch in $(branches_matching refs/heads/); do
        submit_branch $branch $REMOTE
      done

    # If LOCAL is set
    elif [ -n "$LOCAL" ]; then
      # submit all branches that only exist locally
      for branch in $(local_only_branches); do
        submit_branch $branch $REMOTE
      done

    # else if branches were provided or you were on one
    elif [ -n "$BRANCHES" ]; then
      # submit those branches
      for branch in $BRANCHES; do
        submit_branch $branch $REMOTE
      done
    fi

    # else nothing happens.

    checkout "$INITIAL_BRANCH"
    exit 0

  else
    echo "Remote $REMOTE not found."
    echo 'Please add it to continue.'
    exit 1
  fi

}

parse_opts() {
  while getopts ":A,all,L,local,r:q,quiet" option
  do
    case "$option" in
      A | all)
        ALL=true
        ;;
      L | local)
        LOCAL=true
        ;;
      r)
        REMOTE="$OPTARG"
        ;;
      q | quiet)
        QUIET=true
        ;;
      *)
        usage; exit 1
        ;;
    esac
  done
}
