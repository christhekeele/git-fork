#!/bin/sh

usage() {
  cat <<USAGE
usage: git fork submit [<branch_names>... | -L | -A] [-r <remote>] [-q]

Arguments:
  <branch_names>  List of branches to rebase off of master.
                  Defaults to the current branch if not on master.

Options:
  -A              Submits all branches.
  -L              Submits all branches that only exist locally.
  -r <remote>     Remote to push to.
                  Defaults to origin.
  -q              Suppresses output.

USAGE
}

help() {
  usage; cat <<HELP
Ensures <branch_names> are updated, then pushes them to a <remote>.

If <branch_names> are supplied, each branch is rebased off of the fresh master.
You can also instead submit all branches that only exist locally,
or every branch, through the -L and -A flags.

-A overrides -L overrides <branch_names>.

HELP
}

cmd_help() {
  help; exit 0
}

cmd_submit(){

  local initial_branch=$(current_branch)
  local remote
  local branches

  parse_args "$@"
  parse_opts "$@"

  assert_ref_exists $remote

  for branch in $branches; do
    submit_branch $branch $remote
  done

  checkout "$initial_branch"
  exit 0

}

parse_args() {
  # Until parameter doesn't exist or is an option
  until [ -z "$1" ] || [[ $1 = -* ]]; do
    # add it as a branch name
    branches="$branches $1"; shift
  done

  # If no branches supplied and current is not master, submit current.
  if [[ -z "$branches" ]] && [[ $initial_branch != 'master' ]]; then
    branches="$initial_branch"
  fi
}

parse_opts() {
  while getopts ":LAr:q" option
  do
    case "$option" in
      L)
        branches=$(local_only_branches)
        ;;
      A)
        branches=$(branches_matching refs/heads/)
        ;;
      r)
        remote="$OPTARG"
        ;;
      q)
        QUIET=true
        ;;
      *)
        usage; exit 1
        ;;
    esac
  done
  if [[ -z "$remote" ]]; then
    remote='origin'
  fi
}
