#!/bin/sh

usage() {
  cat <<USAGE
usage: git fork status [<branch_names>... | -L | -A] [-r <remote>]

Arguments:
  <branch_names>  List of branches to display fork information about.
                  Defaults to the current branch if not on master.

Options:
  -A              Displays state of all branches.
  -L              Displays state of all branches that only exist locally.
  -r <remote>     Remote to check submission status against.
                  Tries origin if not specified.

USAGE
}

help() {
  usage; cat <<HELP
Displays the state of your fork. Always shows you how far behind master is
from source/master.

If <branch_names> are supplied, information about each branch is displayed.
It tells you how far it's behind master and source/master, so you can update.
If origin exists or another <remote> is supplied, it will also tell you how far
ahead each branch is of any corresponding remote branches, so you can submit.

You can also instead query all branches that only exist locally (+ master),
or every branch, through the -L and -A flags.

-A overrides -L overrides <branch_names>.

HELP
}

cmd_help() {
  help; exit 0
}

cmd_status(){

  assert_ref_exists 'source/master'

  local initial_branch=$(current_branch)
  local remote
  local branches

  parse_args "$@"
  parse_opts "$@"

  for branch in $branches; do
    branch_status $branch $remote
  done

  output "master: $(present_behind master source/master)"

  exit 0
}

parse_args() {
  # Until parameter doesn't exist or is an option
  until [ -z "$1" ] || [[ $1 = -* ]]; do
    # add it as a branch name
    branches="$branches $1"; shift
  done

  # If no branches supplied and current is not master, rebase current.
  if [[ -z "$branches" ]] && [[ $initial_branch != 'master' ]]; then
    branches="$initial_branch"
  fi
}

parse_opts() {
  while getopts ":LAr:" option
  do
    case "$option" in
      L)
        branches=$(local_only_branches)
        ;;
      A)
        branches=$(branches_matching refs/heads/)
        ;;
      r)
        remote="$OPTARG"
        ;;
    esac
  done
  if [[ -z "$remote" ]]; then
    remote='origin'
  fi
}
