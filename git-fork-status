#!/bin/sh

usage() {
  cat <<USAGE
usage: git fork status [-A | -L | <branch_names>...] [-r <remote>]

Arguments:
  <branch_names>  List of branches to rebase off of master.
                  Defaults to the current branch if not on master.

Options:
  -A              Submits all branches.
  -L              Submits all branches that only exist locally.
  -r <remote>     Remote to check submission status against.
                  Tries origin if not specified.

USAGE
}

help() {
  usage; cat <<HELP
Ensures <branch_names> are updated, then pushes them to a <remote>.

If <branch_names> are supplied, each branch is rebased off of the fresh master.
You can also instead submit all branches that only exist locally,
or every branch.

HELP
}

cmd_help() {
  help; exit 0
}

cmd_status(){

  local initial_branch=$(current_branch)
  local remote=''
  local branches=''
  local all_branches=''
  local local_branches=''

  # Assert the existance of a <source> remote with <master> branch, or fail
  if [[ -n "$(branch_exists 'source master')" ]]; then

    # Until parameter doesn't exist or is an option
    until [ -z "$1" ] || [[ $1 = -* ]]; do
      # add it as a branch name
      branches="$branches $1"; shift
    done

    # If no branches supplied and current is not master, rebase current.
    if [[ -z "$branches" ]] && [[ $initial_branch != 'master' ]]; then
      branches="$initial_branch"
    fi

    parse_opts "$@"

    # If no remote specified, try origin
    if [[ -z "$remote" ]]; then
      remote='origin'
    fi

    # If all_branches is set
    if [ -n "$all_branches" ]; then
      # get status for all branches
      for branch in $(branches_matching refs/heads/); do
        branch_status $branch $remote
      done

    # If local_branches is set
    elif [ -n "$local_branches" ]; then
      # get status for all branches that only exist locally
      for branch in $(local_only_branches); do
        branch_status $branch $remote
      done

    # else if branches were provided or you were on one
    elif [ -n "$branches" ]; then
      # get status for those branches
      for branch in $branches; do
        branch_status $branch $remote
      done
    fi

    output "master: $(present_behind master source/master)"

    # else outputting master status suffices.

    exit 0

  else
    echo 'git-fork expects a branch named <master> in a remote named <source>.'
    echo 'Please add one to continue.'
    exit 1
  fi
}

parse_opts() {
  while getopts ":ALr:" option
  do
    case "$option" in
      A)
        all_branches=true
        ;;
      L)
        local_branches=true
        ;;
      r)
        remote="$OPTARG"
        ;;
    esac
  done
}
