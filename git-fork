#!/bin/sh
# Credit to github.com/localmed/git-jira-flow for this project structure.

if [ "$DEBUG" = "yes" ]; then
  set -x
fi
set -e

export GITFORK_VERSION="0.2.1"

# The sed expression here replaces all backslashes by forward slashes.
# This helps our Windows users, while not bothering our Unix users.
export GITFORK_DIR=$(dirname "$(echo "$0" | sed -e 's,\\,/,g')")

export CALL_DIR=$(pwd)


usage() {
  cat <<USAGE
usage: git fork <subcommand>

Git fork abstracts away the process of making OSS contributions.
It integrates with GitHub's fork system, but is host-agnostic in
its implementation.

Available subcommands are:
  help      Displays in-depth help
  version   Displays git-fork version
  new       Forks the given repository
  start     Updates master from source and creates a new branch
  update    Pulls the source into master and rebases branches against it
  submit    Updates your fork and sends a pull request
  status    Informs you if:
              master is behind source/master
              branches are behind master
              branches are not submitted

USAGE
}

help() {
  usage; cat <<HELP
The assumed OSS contribution workflow and the corresponding commands are:

- git fork new <source> [<destination>] [-o <origin>]
  1.  Clone an open source project at <destination>
  2.  Set it as a special remote (<source>)
  3.  Set up a remote to host your contributions if you wish (-o <origin>)

- git fork start <branch_name>
  4.  Ensure master is up to date with source
  5.  Create a branch to develop a contribution (<branchname>)

- git fork update [<branch_names>...] [--all]
  6.  Periodically update master from source
  7.  Rebase contribution branches off of master

8. Handle merge conflicts during rebase

- git fork submit [<branch_names>...] [-r <remote>]
  9.  Ensure master is up to date with source
  10.  Rebase contribution branches off of master (<branch_names>)
  11. Push contribution branches to origin or a public remote for approval

As you can see, using git-fork takes care of all steps of the process,
expect for handling merge conflicts during rebase.

Existing forks can adopt git-fork simply by adding a remote named <source>.

HELP
}

version() {
  echo $GITFORK_VERSION
}


main() {
  if [ "$#" -lt 1 ]; then
    usage; exit 1
  fi

  source "$GITFORK_DIR/fork-helpers"

  local subcommand="$1"; shift
  case $subcommand in
    "-h"|"--help"|"help")
      help; exit 0
      ;;
    "-v"|"--version"|"version")
      version; exit 0
      ;;
  esac

  if [ ! -e "$GITFORK_DIR/git-fork-$subcommand" ]; then
    usage; exit 1
  fi
  source "$GITFORK_DIR/git-fork-$subcommand"

  case $1 in
    "-h"|"--help"|"help")
      subcommand="help"
      ;;
  esac

  if [ ! type "cmd_$subcommand" >/dev/null 2>&1 ]; then
    usage; exit 1
  fi

  cmd_$subcommand "$@"
}

main "$@"
