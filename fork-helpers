#!/bin/sh

####
# Text helpers
##

output() {
  if [[ -z "$QUIET" ]]; then
    echo $1
  fi
}

fail() {
  echo "$@" >&2
  exit 1
}

line_count() {
  if [[ -z "$1" ]]; then
    echo '0'
  else
    echo "$1" | sed '/^\s*$/d' | wc -l | tr -d ' '
  fi
}

git_dir_name() {
  # Git repo URI => project directory
  echo $1 | grep -Eo '\/.+?(\/)?(.\git)?$' | grep -Eo '[^\/].+[^\/][^\.git]'
}

####
# Git helpers
##

# This shit is why Aspect oriented programming exists.
execute() {
  if [[ -z "$QUIET" ]]; then
    eval "$1"
  else
    eval "$1 -q"
  fi
}

current_branch() {
  echo $(git rev-parse --abbrev-ref HEAD)
}

checkout() {
  # Only checkout if neccesary. Saves some time.
  if [[ $1 != $(current_branch) ]]; then
    execute "git checkout $1"
  fi
}

commit_count() {
  line_count "$(git rev-list $1..$2)"
}

ref_exists() {
  echo $(git show-ref refs/heads/$1)
}

assert_ref_exists() {
  test -n $(ref_exists $1) || fail <<-'MSG'
    fatal: git-fork can't find '$1'.
    fatal: Could not read from remote repository.

    Please make sure you have the correct access rights
    and the repository exists.
MSG
}

branches_matching() {
  echo $(git for-each-ref --format='%(refname:short)' $1)
}

local_only_branches() {
  local branches=""
  # List local branches by name
  local local_branches=$(branches_matching refs/heads/)
  # List source branches by source/name
  local source_branches=$(branches_matching refs/remotes/source/)
  for local in $local_branches; do
    # If branch is not found in source
    if [[ -z $(echo $source_branches | grep -Eo "\bsource\/$local\b") ]]; then
      # add to local only list
      branches="$local $branches"
    fi
  done
  echo $branches
}

####
# Presenters
##

present_behind() {
  local diff=$(commit_count $1 $2)
  if [[ $diff = '0' ]]; then
    echo "up to date with $2"
  else
    echo "behind $2 by $diff commits"
  fi
}

present_ahead() {
  local diff=$(commit_count $1 $2)
  if [[ $diff = '0' ]]; then
    echo "up to date with $1"
  else
    echo "ahead of $1 by $diff commits"
  fi
}

####
# Heavy lifting
##

branch_status() {
  local branch=$1
  local remote=$2
  # Skip master
  if [[ "$branch" != 'master' ]]; then
    # Ensure branch exists
    if [[ -n $(ref_exists $branch) ]]; then
      local behind_master=$(present_behind $branch master)
      local behind_source=$(present_behind $branch source/master)
      local ahead_remote=''
      # Try remote
      if [[ -n "$remote" ]] && [[ -n $(branches_matching "refs/remotes/$remote/$branch") ]]; then
        ahead_remote=$(present_ahead $remote/$branch $branch)
      else
        ahead_remote="submission status unkown"
      fi
      output "$branch: $behind_master, $behind_source, $ahead_remote."
    else
      output "Branch $branch not found. Skipping."
    fi
  fi
}

rebase_branch() {
  local branch=$1
  # Skip master
  if [ $branch != 'master' ]; then
    # Ensure branch exists
    if [[ -n $(ref_exists $branch) ]]; then
      # If branch needs rebase
      if [[ $(commit_count $branch master) != '0' ]]; then
        output "Updating branch $branch..."
        checkout "$branch -q"
        execute "git rebase master"
      else
        output "Branch $branch is already up to date."
      fi
    else
      output "Branch $branch not found. Skipping."
    fi
  fi
}

submit_branch() {
  local branch=$1
  local remote=$2
  # Skip master
  if [ $branch != 'master' ]; then
    # Ensure branch exists
    if [[ -n $(ref_exists $branch) ]]; then
      execute "git fork update $branch"
      # If branch needs to be submitted
      if [[ $(commit_count $remote/$branch $branch) != '0' ]]; then
        checkout "$branch"
        execute "git push $remote $branch"
      else
        output "Branch $branch is already submitted."
      fi
    else
      output "Branch $branch not found. Skipping."
    fi
  fi
}
